package edu.uclm.esi.fakeaccountsbe.tests;// Generated by Selenium IDE

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.Duration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.api.TestMethodOrder;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

@TestInstance(Lifecycle.PER_CLASS)

@TestMethodOrder(OrderAnnotation.class)
public class TestSistemaRegistro {

	private WebDriver driverA, driverB;
	private Map<String, Object> vars;
	JavascriptExecutor jsA, jsB;
	private WebDriverWait waitA, waitB;

	@BeforeAll
	public void setUp() {
		System.setProperty("webdriver.chrome.driver",
				"C:/Users/Msi/Downloads/chromedriver-win64/chromedriver-win64/chromedriver.exe");
		ChromeOptions options = new ChromeOptions();
		options.setBinary("C:/Users/Msi/Downloads/chrome-win64/chrome-win64/chrome.exe");
		options.addArguments("--remote-allow-origins=*");
		options.addArguments("--no-sandbox");
		options.addArguments("--disable-dev-shm-usage");

		driverA = new ChromeDriver(options);
		this.waitA = new WebDriverWait(driverA, Duration.ofSeconds(3));
		jsA = (JavascriptExecutor) driverA;

		vars = new HashMap<String, Object>();

		driverB = new ChromeDriver(options);
		this.waitB = new WebDriverWait(driverB, Duration.ofSeconds(3));
		jsB = (JavascriptExecutor) driverB;

		driverA.get("https://alarcosj.esi.uclm.es/examplesfortesting");
		driverB.get("https://alarcosj.esi.uclm.es/examplesfortesting");

		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();

		int screenWidth = (int) screenSize.getWidth();
		int screenHeight = (int) screenSize.getHeight();

		driverA.manage().window().setPosition(new Point(0, 0));
		driverA.manage().window().setSize(new Dimension(screenWidth / 2, screenHeight));

		driverB.manage().window().setPosition(new Point(screenWidth/2 + 1, 0));
		driverB.manage().window().setSize(new Dimension(screenWidth / 2, screenHeight));
	}

	@AfterAll
	public void tearDown() {
		driverA.quit();
		driverB.quit();
	}

	@Test
	@Order(1)
	public void testRegistroCorrecto() {
		registrar(this.driverA, this.waitA, "Adrian.Utrilla", "adrian.utrilla@adrian.com", "123465Au", "123465Au");

		WebElement etiqueta = waitA.until(
				ExpectedConditions.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-login/h2")));
		assertEquals("Login", etiqueta.getText());
	}

	@Test
	@Order(1)
	public void testRegistroIncorrecto() {
		registrar(driverB, waitB, "perico.perico", "perico.perico@perico.com", "perico1234", "perico123");

		WebElement etiqueta = waitB.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-register/form/div[4]/small")));
		assertEquals("Passwords do not match.", etiqueta.getText());
	}

	@Test
	@Order(2)
	public void testLogin() {
		this.loginName(driverA, waitA, "Adrian.Utrilla", "123465Au");

		String curretntUrl = driverA.getCurrentUrl();
		assertEquals("https://alarcosj.esi.uclm.es/examplesfortesting/angular/celebration", curretntUrl);
		this.jsA.executeScript("window.history.go(-2)");
		this.waitA.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-register/h2")));
		assertEquals("Register", driverA.findElement(By.xpath("/html/body/app-root/div/main/app-register/h2")).getText());
	}

	@ParameterizedTest @Order(3)
	@CsvSource({
		"Adrian.Utrilla, adrian.utrilla@adrian.com, 123465Au, 123465Au, true",
		"perico.perico, perico.perico@perico.com, perico1234, perico123, false",
		"Antonio, antonio@antonio.es, Antonio1234, Antonio123, false",
		"Antonio, antonio@antonio.es, Antonio1234, Antonio1234, true"
	})
	void registroMasivo(String nombre, 
			String email, String pwd1, String pwd2,Boolean veredictoDePaso) {
		this.irHome(this.driverA);
		this.registrar(this.driverA, this.waitA, nombre, email, pwd1, pwd2);
		if(veredictoDePaso) {
            WebElement etiqueta = waitA.until(
                    ExpectedConditions.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-login/h2")));
            assertEquals("Login", etiqueta.getText());
		}else {
			WebElement etiqueta = waitB.until(ExpectedConditions
					.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-register/form/div[4]/small")));
			assertEquals("Passwords do not match.", etiqueta.getText());
			
			List<WebElement> elementos = driverA.findElements(By.tagName("input"));
			elementos.forEach(e -> e.clear());
		}
	}

	private void loginName(WebDriver driver, WebDriverWait wait, String nombre, String pwd) {
		WebElement cajaEmail = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-login/form/div[1]/input")));
		WebElement cajaPassword = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-login/form/div[2]/input")));
		WebElement boton = driverA.findElement(By.tagName("button"));

		cajaEmail.sendKeys(nombre);
		cajaPassword.sendKeys(pwd);
		boton.click();
	}

	private void registrar(WebDriver driver, WebDriverWait wait, String nombre, String email, String pwd1,
			String pwd2) {
		WebElement we = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div/div/a[1]")));
		we.click();

		we = wait.until(
				ExpectedConditions.elementToBeClickable(By.xpath("/html/body/app-root/div/header/nav/ul/li[2]/a")));
		we.click();

		WebElement cajaNombre = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-register/form/div[1]/input")));
		WebElement cajaEmail = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-register/form/div[2]/input")));
		WebElement cajaPassword = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-register/form/div[3]/input")));
		WebElement cajaPassword2 = wait.until(ExpectedConditions
				.visibilityOfElementLocated(By.xpath("/html/body/app-root/div/main/app-register/form/div[4]/input")));
		WebElement botonRegistrar = wait.until(ExpectedConditions.visibilityOfElementLocated(By.tagName("button")));

		cajaNombre.sendKeys(nombre);
		cajaEmail.sendKeys(email);
		cajaPassword.sendKeys(pwd1);
		cajaPassword2.sendKeys(pwd2);
		botonRegistrar.click();
	}
	
	public void irHome(WebDriver driver) {
		driver.get("https://alarcosj.esi.uclm.es/examplesfortesting");
		WebElement we = waitA.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div/div/a[1]")));
		we.click();
	}
}
